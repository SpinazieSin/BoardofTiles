The board is made up of tiles.
Tiles are represented as objects with x-y coordinates
x y represent int coordinates on a 2-dimensional vector plane

UNIT REPRESENTATION-
Swordsman (0):
-Hitpoints = 4
-Weapon Skill = 6
[0, 4, 6]

General (1):
-Hitpoints = 5
-Weapon Skill = 8
[1, 5, 8]

Goblin (2):
-Hitpoints = 3
-Weapon Skill = 4
[2, 3, 4]

Orc (3):
-Hitpoints = 10
-Weapon Skill = 8
[2, 3, 4]

BOARD-
2-dimensional vector plane with x and y coordinates
x_max = 4, -4 (counting from -4)
y_max = 8 (counting from 0)

illegal zones

<y_max OR >y_start, x
y,<x_max OR >-x_max
y_max, <0 OR >0 (continue until stop)
y_max-1,<1 OR >-1
y_max-2,<2 OR >-2 etc.
y_max-x_max-1,<x_max-1 OR >-x_max+1  (stop)

every board as an illegal zone list.
the standard illegal zones can be modified to mimic terrain
ie at 3,4 is illegal so there might be a rock there

make tile object based on the illegal zones

CHECKING ADJACENT UNITS-
the tiles have an adjacent tiles property which is
a list of coordinates with all adjacent tiles

Finding neighbouring tiles is as follows
-tile
3,4

neighbouring tiles
----
-1,0
2,4
----
+1,0
4,4
----
0,-1
3,3
----
0,+1
3,5
----
-1,+1
2,5
----
+1,-1
4,3


---
----
-----
------
-------
------
-----
----
---
